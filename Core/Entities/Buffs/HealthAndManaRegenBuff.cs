using UnityEngine;

namespace SuspiciousGames.Saligia.Core.Entities.Buffs
{
    public class HealthAndManaRegenBuff : Buff
    {
        private HealthAndManaRegenBuffData _data;

        private int _lifeToHeal;
        private float _accumulatedHealthRegeneration;
        private bool _isFullLife;

        private float _accumulatedManaRegeneration;
        private bool _isFullMana;

        private int _manaRegenerated;
        private int _healthRegenerated;

        public HealthAndManaRegenBuff(BuffData buff, Entity buffTarget, Entity buffSource) : base(buff, buffTarget, buffSource)
        {
            _data = (HealthAndManaRegenBuffData)BuffData;
        }

        protected override void ApplyEffect()
        {
            _lifeToHeal = (int)Mathf.Ceil(buffTarget.HealthComponent.MaxHitPoints * _data.PercentualHealthRegenerationValue);
            _accumulatedManaRegeneration = 0.0f;
            _accumulatedHealthRegeneration = 0.0f;
            _manaRegenerated = 0;
            _healthRegenerated = 0;
        }

        public override void Tick(float delta)
        {
            base.Tick(delta);

            _isFullMana = IsFullMana();
            _isFullLife = IsFullLife();

            if (_isFullMana && _isFullLife)
            {
                buffTarget.BuffComponent.RemoveBuff(BuffData);
                return;
            }

            if (!_isFullMana)
            {
                _accumulatedManaRegeneration += delta * _data.PercentualManaRegenerationValue * 100f / BuffData.Duration;

                if (_accumulatedManaRegeneration >= 1.0f)
                {
                    buffTarget.CastCostComponent.AddMindPower((int)_accumulatedManaRegeneration, ignoreRegenMultipliers: true);
                    _manaRegenerated = (int)_accumulatedManaRegeneration;
                }
                _accumulatedManaRegeneration -= (int)_accumulatedManaRegeneration;
            }

            if (!_isFullLife)
            {
                _accumulatedHealthRegeneration += delta * _lifeToHeal / BuffData.Duration;

                if (_accumulatedHealthRegeneration >= 1.0f)
                {
                    buffTarget.HealthComponent.ApplyHealing((int)_accumulatedHealthRegeneration);
                    _healthRegenerated = (int)_accumulatedHealthRegeneration;
                }
                _accumulatedHealthRegeneration -= (int)_accumulatedHealthRegeneration;
            }
        }

        private bool IsFullMana()
        {
            return buffTarget.CastCostComponent ? buffTarget.CastCostComponent.CurrentMindPower == buffTarget.CastCostComponent.MaxMindPower : false;
        }

        private bool IsFullLife()
        {
            return buffTarget.HealthComponent ? buffTarget.HealthComponent.CurrentHitPoints == buffTarget.HealthComponent.MaxHitPoints : false;
        }

        protected override void UndoEffect()
        {
            Debug.Log("Mana regenerated by: " + _manaRegenerated);
            Debug.Log("Health regenerated by: " + _healthRegenerated);
        }
    }
}
